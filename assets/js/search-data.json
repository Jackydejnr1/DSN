{
  
    
        "post0": {
            "title": "Description",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline import warnings warnings.filterwarnings(&#39;ignore&#39;) . Next, I loaded the dataset . df_train = pd.read_csv(r&#39;C: Users FranCis Desktop Zindi COmpetition Hackathon_Zindi train.csv&#39;) df_test = pd.read_csv(r&#39;C: Users FranCis Desktop Zindi COmpetition Hackathon_Zindi Test.csv&#39;) df_submission = pd.read_csv(r&#39;C: Users FranCis Desktop Zindi COmpetition Hackathon_Zindi SampleSubmission.csv&#39;) . &#39;It&#39;s time to check out some features of our datasets with the .head() method&#39; . df_train.head() . VehicleID Location Maker Model Year Colour Amount (Million Naira) Type Distance . 0 VHL12546 | Abuja | Honda | Accord Coupe EX V-6 | 2,011 | Silver | 2.2 | Nigerian Used | NaN | . 1 VHL18827 | Ibadan | Hyundai | Sonata | 2,012 | Silver | 3.5 | Nigerian Used | 125000.0 | . 2 VHL19499 | Lagos | Lexus | RX 350 | 2,010 | Red | 9.2 | Foreign Used | 110852.0 | . 3 VHL17991 | Abuja | Mercedes-Benz | GLE-Class | 2,017 | Blue | 22.8 | Foreign Used | 30000.0 | . 4 VHL12170 | Ibadan | Toyota | Highlander | 2,002 | Red | 2.6 | Nigerian Used | 125206.0 | . df_test.head() . VehicleID Location Maker Model Year Colour Type Distance . 0 VHL18518 | Abuja | BMW | 323i | 2,008 | White | Foreign Used | 30524.0 | . 1 VHL17149 | Lagos | Toyota | Camry | 2,013 | White | Foreign Used | NaN | . 2 VHL10927 | Lagos | Toyota | Highlander Limited V6 | 2,005 | Gold | Foreign Used | NaN | . 3 VHL12909 | Lagos | Toyota | Camry | 2,011 | Gray | Foreign Used | 166839.0 | . 4 VHL12348 | Lagos | Lexus | ES 350 FWD | 2,013 | Red | Foreign Used | 88862.0 | . df_submission.head() . VehicleID Amount (Million Naira) . 0 VHL18518 | 1.0 | . 1 VHL17149 | 1.0 | . 2 VHL10927 | 1.0 | . 3 VHL12909 | 1.0 | . 4 VHL12348 | 1.0 | . print(df_train.shape) print(df_test.shape) . (7205, 9) (2061, 8) . df_train.dtypes . VehicleID object Location object Maker object Model object Year object Colour object Amount (Million Naira) float64 Type object Distance float64 dtype: object . df_test.dtypes . VehicleID object Location object Maker object Model object Year object Colour object Type object Distance float64 dtype: object . df_train[&#39;Year&#39;] = df_train[&#39;Year&#39;].str.replace(&#39;,&#39;, &quot;&quot;) #df_train[&#39;Distance&#39;] = df_train[&#39;Distance&#39;].str.replace(&#39;,&#39;, &quot;&quot;) . df_train . VehicleID Location Maker Model Year Colour Amount (Million Naira) Type Distance . 0 VHL12546 | Abuja | Honda | Accord Coupe EX V-6 | 2011 | Silver | 2.20 | Nigerian Used | NaN | . 1 VHL18827 | Ibadan | Hyundai | Sonata | 2012 | Silver | 3.50 | Nigerian Used | 125000.0 | . 2 VHL19499 | Lagos | Lexus | RX 350 | 2010 | Red | 9.20 | Foreign Used | 110852.0 | . 3 VHL17991 | Abuja | Mercedes-Benz | GLE-Class | 2017 | Blue | 22.80 | Foreign Used | 30000.0 | . 4 VHL12170 | Ibadan | Toyota | Highlander | 2002 | Red | 2.60 | Nigerian Used | 125206.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 7200 VHL14329 | Abuja | Honda | Civic | 2018 | Gray | 5.70 | Foreign Used | 65000.0 | . 7201 VHL10637 | Abuja | BMW | X3 | 2007 | White | 4.00 | Nigerian Used | 200000.0 | . 7202 VHL19734 | Abuja | Toyota | RAV4 2.5 Limited 4x4 | 2010 | Black | 2.85 | Nigerian Used | NaN | . 7203 VHL15569 | Lagos | Mercedes-Benz | GLK-Class 350 | 2012 | Black | 8.65 | Foreign Used | 85750.0 | . 7204 VHL15246 | Abuja | Honda | Accord Crosstour | 2012 | Gray | 3.38 | Nigerian Used | 83308.0 | . 7205 rows × 9 columns . df_test[&#39;Year&#39;] = df_test[&#39;Year&#39;].str.replace(&#39;,&#39;,&quot;&quot;) # df_test[&#39;Distance&#39;] = df_test[&#39;Distance&#39;].str.replace(&#39;,&#39;,&quot;&quot;) . df_test[&#39;Distance&#39;] = df_test[&#39;Distance&#39;].astype(str) . df_test.dtypes . VehicleID object Location object Maker object Model object Year object Colour object Type object Distance object dtype: object . df_test[&#39;Distance&#39;] = df_test[&#39;Distance&#39;].str.replace(&#39;,&#39;,&quot;&quot;) . df_test.head() . VehicleID Location Maker Model Year Colour Type Distance . 0 VHL18518 | Abuja | BMW | 323i | 2008 | White | Foreign Used | 30524.0 | . 1 VHL17149 | Lagos | Toyota | Camry | 2013 | White | Foreign Used | nan | . 2 VHL10927 | Lagos | Toyota | Highlander Limited V6 | 2005 | Gold | Foreign Used | nan | . 3 VHL12909 | Lagos | Toyota | Camry | 2011 | Gray | Foreign Used | 166839.0 | . 4 VHL12348 | Lagos | Lexus | ES 350 FWD | 2013 | Red | Foreign Used | 88862.0 | . df_train.drop([&#39;VehicleID&#39;], axis=1, inplace=True) df_train.drop([&#39;Model&#39;], axis=1, inplace = True) . df_test.drop([&#39;VehicleID&#39;], axis=1, inplace=True) df_test.drop([&#39;Model&#39;], axis = 1, inplace = True) . df_train.head() . Location Maker Year Colour Amount (Million Naira) Type Distance . 0 Abuja | Honda | 2011 | Silver | 2.2 | Nigerian Used | NaN | . 1 Ibadan | Hyundai | 2012 | Silver | 3.5 | Nigerian Used | 125000.0 | . 2 Lagos | Lexus | 2010 | Red | 9.2 | Foreign Used | 110852.0 | . 3 Abuja | Mercedes-Benz | 2017 | Blue | 22.8 | Foreign Used | 30000.0 | . 4 Ibadan | Toyota | 2002 | Red | 2.6 | Nigerian Used | 125206.0 | . df_test.head() . Location Maker Year Colour Type Distance . 0 Abuja | BMW | 2008 | White | Foreign Used | 30524.0 | . 1 Lagos | Toyota | 2013 | White | Foreign Used | nan | . 2 Lagos | Toyota | 2005 | Gold | Foreign Used | nan | . 3 Lagos | Toyota | 2011 | Gray | Foreign Used | 166839.0 | . 4 Lagos | Lexus | 2013 | Red | Foreign Used | 88862.0 | . df_train[&#39;Distance&#39;] = pd.to_numeric(df_train[&#39;Distance&#39;]) . df_train.dtypes . Location object Maker object Year object Colour object Amount (Million Naira) float64 Type object Distance float64 dtype: object . df_test[&#39;Distance&#39;] = pd.to_numeric(df_test[&#39;Distance&#39;], errors=&#39;coerce&#39;) . df_test.dtypes . Location object Maker object Year object Colour object Type object Distance float64 dtype: object . df_train.isnull().sum() . Location 0 Maker 0 Year 21 Colour 0 Amount (Million Naira) 17 Type 197 Distance 2360 dtype: int64 . df_test.isnull().sum() . Location 0 Maker 0 Year 2 Colour 0 Type 54 Distance 676 dtype: int64 . df_train.shape . (7205, 7) . df_test.shape . (2061, 6) . df_train.describe() . Amount (Million Naira) Distance . count 7188.000000 | 4.845000e+03 | . mean 11.847999 | 1.031989e+05 | . std 25.318922 | 1.182902e+05 | . min 0.450000 | 1.000000e+00 | . 25% 3.500000 | 5.235200e+04 | . 50% 5.650000 | 8.083000e+04 | . 75% 11.662500 | 1.175840e+05 | . max 456.000000 | 1.985400e+06 | . df_train[&#39;Year&#39;].fillna(value=df_train[&#39;Year&#39;].mode()[0], inplace= True ) . df_train[&#39;Amount (Million Naira)&#39;].fillna(value=df_train[&#39;Amount (Million Naira)&#39;].median(), inplace=True) . df_train[&#39;Type&#39;].fillna(value=df_train[&#39;Type&#39;].mode()[0], inplace= True ) . df_train[&#39;Distance&#39;].fillna(value=df_train[&#39;Distance&#39;].mean(), inplace= True ) . df_train.isnull().sum() . Location 0 Maker 0 Year 0 Colour 0 Amount (Million Naira) 0 Type 0 Distance 0 dtype: int64 . df_test[&#39;Year&#39;].fillna(value=df_test[&#39;Year&#39;].mode()[0], inplace= True ) . df_test[&#39;Type&#39;].fillna(value=df_test[&#39;Type&#39;].mode()[0], inplace= True ) . df_test[&#39;Distance&#39;].fillna(value=df_test[&#39;Distance&#39;].median(), inplace= True ) . df_test.isnull().sum() . Location 0 Maker 0 Year 0 Colour 0 Type 0 Distance 0 dtype: int64 . duplicate_train = df_train[df_train.duplicated()] . duplicate_train . Location Maker Year Colour Amount (Million Naira) Type Distance . 715 Lagos | Lexus | 2015 | Black | 9.80 | Foreign Used | 103198.903612 | . 1497 Abuja | Toyota | 2007 | Black | 2.40 | Nigerian Used | 103198.903612 | . 1560 Lagos | Lexus | 2010 | Black | 9.20 | Foreign Used | 103198.903612 | . 1918 Abuja | Lexus | 2005 | Gray | 3.30 | Nigerian Used | 103198.903612 | . 2107 Lagos | Toyota | 2017 | Gray | 18.00 | Foreign Used | 103198.903612 | . 2633 Lagos | Lexus | 2010 | White | 6.00 | Foreign Used | 103198.903612 | . 3164 Lagos | Mercedes-Benz | 2010 | Silver | 7.50 | Foreign Used | 103198.903612 | . 3324 Abuja | Mercedes-Benz | 2009 | Black | 4.50 | Foreign Used | 103198.903612 | . 3506 Lagos | Lexus | 2009 | Silver | 5.40 | Foreign Used | 103198.903612 | . 3867 Abuja | Mercedes-Benz | 2014 | Black | 13.00 | Foreign Used | 103198.903612 | . 3887 Abuja | Toyota | 2016 | Black | 6.30 | Foreign Used | 103198.903612 | . 4069 Lagos | Lexus | 2015 | Silver | 24.00 | Foreign Used | 103198.903612 | . 4353 Lagos | Lexus | 2008 | Gray | 5.90 | Foreign Used | 56284.000000 | . 4366 Lagos | Toyota | 2008 | White | 7.30 | Foreign Used | 103198.903612 | . 4589 Lagos | Lexus | 2009 | Silver | 5.20 | Foreign Used | 103198.903612 | . 4796 Abuja | Toyota | 2015 | Black | 8.00 | Foreign Used | 103198.903612 | . 4845 Lagos | Lexus | 2007 | Gray | 5.50 | Foreign Used | 103198.903612 | . 5030 Abuja | Hyundai | 2010 | Black | 2.70 | Foreign Used | 103198.903612 | . 5172 Lagos | Lexus | 2017 | Gray | 21.00 | Foreign Used | 103198.903612 | . 5326 Lagos | Mercedes-Benz | 2012 | Black | 12.00 | Foreign Used | 103198.903612 | . 5387 Lagos | Lexus | 2007 | Black | 4.60 | Foreign Used | 103198.903612 | . 5475 Abuja | Toyota | 2008 | Silver | 2.20 | Nigerian Used | 103198.903612 | . 5527 Abuja | Rolls-Royce | 2021 | White | 450.00 | Brand New | 103198.903612 | . 5541 Lagos | Toyota | 2008 | Gray | 5.50 | Foreign Used | 103198.903612 | . 5570 Lagos | Lexus | 2021 | Black | 95.00 | Brand New | 103198.903612 | . 5593 Abuja | Mercedes-Benz | 2014 | Silver | 14.50 | Foreign Used | 103198.903612 | . 5683 Lagos | Toyota | 2018 | Gray | 25.50 | Foreign Used | 27000.000000 | . 5811 Abuja | Toyota | 2004 | Blue | 2.00 | Nigerian Used | 103198.903612 | . 5830 Lagos | Toyota | 2008 | Gold | 4.60 | Foreign Used | 103198.903612 | . 6053 Abuja | Mercedes-Benz | 2015 | Black | 13.50 | Foreign Used | 103198.903612 | . 6099 Abuja | Toyota | 2005 | Gray | 1.65 | Nigerian Used | 103198.903612 | . 6173 Lagos | Toyota | 2012 | White | 8.50 | Foreign Used | 103198.903612 | . 6233 Abuja | Mercedes-Benz | 2021 | Black | 300.00 | Brand New | 103198.903612 | . 6241 Abuja | Hyundai | 2016 | White | 5.40 | Foreign Used | 103198.903612 | . 6247 Abuja | Lexus | 2008 | Silver | 5.50 | Foreign Used | 78000.000000 | . 6271 Abuja | Mercedes-Benz | 2009 | Black | 4.50 | Foreign Used | 103198.903612 | . 6288 Lagos | Toyota | 2013 | Black | 9.20 | Foreign Used | 75000.000000 | . 6396 Lagos | Toyota | 2008 | Silver | 6.50 | Foreign Used | 103198.903612 | . 6504 Abuja | Mercedes-Benz | 2008 | Gold | 3.75 | Nigerian Used | 103198.903612 | . 6520 Lagos | Lexus | 2008 | Black | 4.50 | Foreign Used | 103198.903612 | . 6588 Abuja | Toyota | 2008 | Blue | 3.30 | Foreign Used | 89000.000000 | . 6606 Lagos | Mercedes-Benz | 2014 | Black | 13.50 | Foreign Used | 103198.903612 | . 7202 Abuja | Toyota | 2010 | Black | 2.85 | Nigerian Used | 103198.903612 | . df_train.duplicated().sum() . 43 . duplicates_test = df_test[df_test.duplicated()] . duplicates_test . Location Maker Year Colour Type Distance . 204 Lagos | Toyota | 2008 | Silver | Foreign Used | 82000.0 | . 224 Lagos | Toyota | 2011 | Black | Foreign Used | 82000.0 | . 241 Abuja | Mercedes-Benz | 2010 | Black | Foreign Used | 82000.0 | . 271 Lagos | Mercedes-Benz | 2015 | White | Foreign Used | 82000.0 | . 311 Abuja | Toyota | 2013 | Red | Foreign Used | 82000.0 | . ... ... | ... | ... | ... | ... | ... | . 2003 Lagos | Toyota | 2011 | Red | Foreign Used | 82000.0 | . 2018 Lagos | Lexus | 2010 | Black | Foreign Used | 82000.0 | . 2027 Lagos | Mercedes-Benz | 2015 | White | Foreign Used | 82000.0 | . 2033 Lagos | Lexus | 2017 | White | Foreign Used | 82000.0 | . 2038 Lagos | Lexus | 2008 | Gray | Foreign Used | 82000.0 | . 155 rows × 6 columns . df_test.duplicated().sum() . 155 . df_train = df_train.drop_duplicates(keep = False) . df_train.duplicated().sum() . 0 . df_test = df_test.drop_duplicates(keep = False) . df_test.duplicated().sum() . 0 . df_train.hist(figsize=(14,14), xrot=45) plt.show() . for column in df_train.select_dtypes(include=&#39;object&#39;): if df_train[column].nunique() &lt; 10: sns.countplot(y=column, data=df_train) plt.show() . df_train.dtypes . Location object Maker object Year object Colour object Amount (Million Naira) float64 Type object Distance float64 dtype: object . sns.countplot(data = df_train, x = &#39;Location&#39;); . sns.countplot(data = df_train, x = &#39;Type&#39;); . plt.figure(figsize = (16,8)) ax=sns.countplot(x = &quot;Maker&quot;, data = df_train) ax.set_title(&quot;Number of different car makers&quot;, fontsize = 20) plt.xlabel(&quot;Car Makers&quot;,fontsize=17) plt.ylabel(&quot;count&quot;, fontsize=17) plt.yticks(size=15) plt.xticks(size=10, rotation=80) for p in ax.patches: ax.annotate(f&#39; n{p.get_height()}&#39;, (p.get_x()+0.2, p.get_height()), color=&#39;black&#39;, size=15, ha=&quot;center&quot;) . plt.figure(figsize = (16,8)) ax=sns.countplot(x = &quot;Year&quot;, data = df_train) ax.set_title(&quot;Year car was produced&quot;, fontsize = 20) plt.xlabel(&quot;Year&quot;,fontsize=17) plt.ylabel(&quot;count&quot;, fontsize=17) plt.yticks(size=15) plt.xticks(size=10, rotation=80) for p in ax.patches: ax.annotate(f&#39; n{p.get_height()}&#39;, (p.get_x()+0.2, p.get_height()), color=&#39;black&#39;, size=15, ha=&quot;center&quot;) . plt.figure(figsize = (16,8)) ax=sns.countplot(x = &quot;Colour&quot;, data = df_train) ax.set_title(&quot;Colour of car&quot;, fontsize = 20) plt.xlabel(&quot;Car Colour&quot;,fontsize=17) plt.ylabel(&quot;count&quot;, fontsize=17) plt.yticks(size=15) plt.xticks(size=10, rotation=80) for p in ax.patches: ax.annotate(f&#39; n{p.get_height()}&#39;, (p.get_x()+0.2, p.get_height()), color=&#39;black&#39;, size=15, ha=&quot;center&quot;) . x = df_train.drop([&quot;Amount (Million Naira)&quot;], axis = 1) y = df_train[&quot;Amount (Million Naira)&quot;] . df_train = pd.get_dummies(x) df_test = pd.get_dummies(df_test) . df_train . Distance Location_Abuja Location_Ibadan Location_Lagos Maker_Acura Maker_Audi Maker_BAW Maker_BMW Maker_Bentley Maker_Brabus ... Colour_Purple Colour_Red Colour_Silver Colour_Teal Colour_Violet Colour_White Colour_Yellow Type_Brand New Type_Foreign Used Type_Nigerian Used . 0 103198.903612 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 1 125000.000000 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 2 110852.000000 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 3 30000.000000 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 4 125206.000000 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 7199 103198.903612 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 7200 65000.000000 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 7201 200000.000000 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | . 7203 85750.000000 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 7204 83308.000000 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 7120 rows × 116 columns . df_test . Distance Location_Abuja Location_Ibadan Location_Lagos Maker_Acura Maker_Audi Maker_BMW Maker_Brabus Maker_Buick Maker_Cadillac ... Colour_Purple Colour_Red Colour_Silver Colour_Teal Colour_V Colour_White Colour_Yellow Type_Brand New Type_Foreign Used Type_Nigerian Used . 0 30524.0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | . 1 82000.0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | . 3 166839.0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 4 88862.0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 5 69843.0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2056 2650.0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 2057 99000.0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 2058 108000.0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 2059 52485.0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | . 2060 124088.0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 1799 rows × 94 columns . df_train, df_test = df_train.align(df_test, join = &#39;inner&#39;, axis = 1) . print(df_train.shape) print(df_test.shape) . (7120, 88) (1799, 88) . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(df_train, y, test_size=0.3, random_state=42) . Feature Scaling . from sklearn.preprocessing import MinMaxScaler scaler = MinMaxScaler(feature_range =(0,1)) X_train = scaler.fit_transform(X_train) # Fit and transform the training data X_test = scaler.transform(X_test) # Transform the test data . Model Building . 1.Linear Regression . from sklearn.linear_model import LinearRegression reg = LinearRegression() reg.fit(X_train, y_train) . LinearRegression() . y_pred_1 = reg.predict(X_test) y_pred_1 . array([ 6.53125, 28.15625, 0.5 , ..., 9.09375, 24.8125 , 71.78125]) . from sklearn.metrics import mean_squared_error mse_1 = mean_squared_error(y_test, y_pred_1) mse_1 . 7.0313261100524735e+22 . rmse_1 = np.sqrt(mse_1) . rmse_1 . 265166478085.9842 . prediction_1 = reg.predict(df_test) prediction_1 . array([ -29573.1875, -79471.75 , -161705.0625, ..., -104670. , -50860.375 , -120269.9375]) . df_submission[&#39;Amount(Million Naira)&#39;] = pd.Series(prediction_1) . df_submission.to_csv(&#39;prediction1.csv&#39;, index =False) . 2. Lasso Regression . from sklearn import linear_model lassoReg = linear_model.Lasso(alpha=0.1) lassoReg.fit(X_train, y_train) . Lasso(alpha=0.1) . y_pred_2 = lassoReg.predict(X_test) . mse_2 = mean_squared_error(y_test, y_pred_2) mse_2 . 361.09632017889777 . rmse_2 = np.sqrt(mse_2) rmse_2 . 19.00253457249579 . prediction_2 = lassoReg.predict(df_test) . df_submission[&#39;Amount(Million Naira)&#39;] = pd.Series(prediction_2) df_submission.to_csv(&#39;prediction2.csv&#39;, index=False) . 3.Decision Tree . from sklearn.tree import DecisionTreeRegressor decision_reg = DecisionTreeRegressor(max_depth=2) decision_reg.fit(X_train, y_train) . DecisionTreeRegressor(max_depth=2) . y_pred_3 = decision_reg.predict(X_test) . mse_3 = mean_squared_error(y_test, y_pred_3 ) mse_3 . 432.91785464655476 . rmse_3 = np.sqrt(mse_3) rmse_3 . 20.80667812618234 . prediction_3 = decision_reg.predict(df_test) df_submission[&#39;Amount(Million Naira)&#39;] = pd.Series(prediction_3) df_submission.to_csv(&#39;prediction3.csv&#39;, index=False) . pip install xgboost . Collecting xgboost Downloading xgboost-1.6.1-py3-none-win_amd64.whl (125.4 MB) Requirement already satisfied: scipy in c: programdata anaconda3 lib site-packages (from xgboost) (1.7.1) Requirement already satisfied: numpy in c: programdata anaconda3 lib site-packages (from xgboost) (1.20.3) Installing collected packages: xgboost Successfully installed xgboost-1.6.1 Note: you may need to restart the kernel to use updated packages. . WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) WARNING: Ignoring invalid distribution -arkupsafe (c: programdata anaconda3 lib site-packages) . import xgboost as xg xgb_r = xg.XGBRegressor(objective =&#39;reg:linear&#39;, n_estimators = 10, seed = 123) # Fitting the model xgb_r.fit(X_train, y_train) # Predict the model y_pred_4 = xgb_r.predict(X_test) mse_4 = mean_squared_error(y_test, y_pred_4) rmse_4 = np.sqrt(mse_4) rmse_4 . [10:13:29] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.6.0/src/objective/regression_obj.cu:203: reg:linear is now deprecated in favor of reg:squarederror. . 16.579844553543765 . prediction_4 = xgb_r.predict(df_test) df_submission[&#39;Amount(Million Naira)&#39;] = pd.Series(prediction_4) df_submission.to_csv(&#39;prediction4.csv&#39;, index=False) .",
            "url": "https://jackydejnr1.github.io/DSN/2022/07/13/AI-In-Every-City-Zindi-Hackathon-2022.html",
            "relUrl": "/2022/07/13/AI-In-Every-City-Zindi-Hackathon-2022.html",
            "date": " • Jul 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jackydejnr1.github.io/DSN/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jackydejnr1.github.io/DSN/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Manasseh Jackson is a data Science enthusiast, passionate about the applications of Mathematics, statistics and machine learning in solving real life problems. He is a Mathematics teacher and Data Science and Analytics tutor and founder,Myagrisctore (https://www.myagricstore.com), Data Scientist 1. . Thank you for visiting my portfolio platform and always reading my contents!! &#8617; . |",
          "url": "https://jackydejnr1.github.io/DSN/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jackydejnr1.github.io/DSN/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}